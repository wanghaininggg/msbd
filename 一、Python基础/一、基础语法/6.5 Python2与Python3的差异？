1.核心类差异
1.Python3对Unicode字符串的原生支持
Python2中使用ASCII码作为默认编码方式导致string有两种类型str和unicode，Python3只支持unicode的string。
python2 python3 表现 转换 作用
str     bytes   字节  encode 存储
unicode str     字符  decode  显示
2.Python3采用的是绝对路径的方式进行import。
3.Python2中存在老式类和新式类的区别，Python3统一采用新式类。新式类生命要求继承object，必须用新式类应用多重继承，
4.Python3使用更加严格的缩进。Python2的缩进机制中，1个tab和8个space是等价的，素所以在缩进中可以同时允许tab和space在代码中的共存。
这种等价机制会导致部分IDE使用存在问题。Python3中1个tab只能找到另外一个tab代替，因此tab和spcae共存会导致报错：TabError：inconsistent use of tabs and spaces in indentation.

2. 废除类差异
1.print语句被Python3废弃，统一使用print函数
2.exec语句被python3废弃，统一使用exec函数
3.execfile语句被Python3废弃，推荐使用exec(open("./filename").read())
4.不想等操作符“<>”被Python3废弃，统一使用“!=”
5.long整数类型被Python3废弃，统一使用int
6.xrange函数被Python3废弃，统一使用range，Python3中range的机制也进行修改并提高了大数据集成生成效率
7.Python3中这些方法再不再返回list对象：dictionary关联的keys(),values(),items(),zip(),map(),filter(),但是可以通过list强行
转换
8.迭代器iterator的next()函数被Python3废弃，统一使用next(iterator)
9.raw_input函数被Python废弃，统一使用input函数
10.字典变量的has_key函数被Python废弃，统一使用in关键字
11.file函数被Python3废弃，统一使用open来处理文件，可以通过io.IOBase检查文件类型
12.apply函数被Python3废弃
13.异常StandardError被Python3废弃，统一使用Exception

3.修改类差异
1. 浮点数出发操作符"/"和"//"的区别

"/":
    Python2:若两个整形数进行运算，结果为整形，但若 两个数中有一个为浮点数，则结果为浮点数。
    Python3:为真除法，运算结果不再根据参加运算的数的类型。
"//":
    Python2: 返回小于除法运算结果的最大整数；从类型上讲，与“/”运算符返回类型逻辑一致。
    Python3:和Python2运算结果一样
2. 异常抛出和捕捉机制的区别
    Python2
    raise IOError, "file error" # 抛出异常
    except NameError, err:  #捕捉异常
    Python3
    raise IOError("file error") # 抛出异常
    except NameError as err:  # 捕捉异常
3.for循环中变量值的区别
    Python2, for 循环会修改外部相同名称变量的值
    i = 1
    print('cimprehension:', [i for i in range(5)])
    print('afterL i=', i) # i = 4
    Python3,for 循环不会修改外部相同名称变量的值
    i = 1
    print('comprehension:', [i for i in range(5)])
    print('after:i=', i) # i = 1
4. round函数返回值区别
    Python2，round函数返回float类型值
    isinstance(round(15.5), int)
    Python3中只有同一类型的对象可以比较
    <'test' # TypeError:unorderable types:int() < str()>

4. 第三方工具包的差异
 ...
5. 工具安装问题差异


