PEP8规范
1. 变量
    常量：大写加下划线 USER_CONSTANT
    私有变量： 小写和一个前导下划线 _private_value
        Python中不存在私有变量一说，若是需要需要保护的变量，使用小写和一个前导下划线。但这只是程序员之间的一个约定，用于
        警告说明这是一个私有变量，外部类不要去访问它。但实际上，外部类还是可以访问到这个变量。
    内置变量：小写，两个前导下划线和两个后置下划线 __class__两个前导下划线会导致变量在解释期间被更名。这是为了避免内置变
    量和其他变量产生冲突。用户定义的变量要严格避免这种风格。以免导致混乱。

2. 函数和方法
    总体而言应该使用，小写和下划线。但有些比较老的库使用的是混合大小写，及首单词小写，之后每个单词第一个字大写，其余小写。
    但现在，小写和下划线都已成为规范。
    私有方法：小写和一个前导下划线。
    这里和私有变量一样，并不是真正的私有访问权限。同时也应该注意一般函数不要使用两个前导下划线。
    特殊方法：小写和两个前导下划线，两个后置下划线。
    这种风格只应用于特殊函数，比如操作符重载等。
    函数参数：小写和下划线，缺省值等号两边无空格。

3. 类
    类总是驼峰式的命名，即所有单词首字母大写其余字母小写。类名应该简明，精确，并足以从中理解类所完成的工作。常见的方法是
    使用表示其类型或者特性的后缀。例如：SQLEngine，MimeTypes对于基类而言，可以使用一个Base或者Abstract前缀，BaseCookie，
    AbstractGroup;

4. 模块和包
    除特殊模块__init__之外，模块名称都使用不带下划线的小写字母。
    若是它们实现的一个协议，那么通常使用lib为后缀，例如：
    import smtplib
    import os
    import sys

5. 关于参数
    5.1 不要用断言来实现静态类型检测。断言可以用于检查函数，但不应仅仅是进行静态类型检测。Python是动态类型语言，静态类型
    检测违背了其设计思想。断言应该用于避免函数不被毫无意义的调用。
    5.2 不要滥用*args和**kwargs。*args和**kwargs参数可能会破坏函数的健壮性。它们使签名变得模糊，而且代码常常开始在不应该
    的地方构建小的参数解析器。

6.  其他
    6.1 使用has和is前缀命名布尔元素
    is_connect = True
    has_member = False
    6.2 用复数形式命名序列
    members = ['user_1', 'user_2']
    6.3 用显示名称命名字典
    person_address = {'user_1': '10 road WD', 'user_2': '20 street huafu'}
    6.4 避免通用名称
    诸如list，dict，sequence或者element这样的名称应该避免
    6.5 避免现有名称
    诸如os，sys这种系统已经存在的名称应该避免。

7. 一些数字
    一行列数：PEP8规定79列。根据自己的情况，比如不要超过满屏时编辑器的显示列数。
    一个函数：不要超过30行代码，即可显示在一个屏幕类，可以不使用垂直游标即可看到整个函数。
    一个类： 不要超过200行代码，不要有超过10个方法。一个模块，不要超过500行。

8. 验证脚本
    可以安装一个PEP8脚本用于验证你的代码风格是否符合PEP8。
