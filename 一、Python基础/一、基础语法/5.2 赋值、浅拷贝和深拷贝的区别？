# 一、赋值
a = [1, 2, 'hello', ['python', 'C++']]
b = a
# 在上述情况下，a和b是一样的，b是a的别名，是引用。
print(id(a), id(b))

# 二、 浅拷贝
# 浅拷贝会创建新对象，其对象非对象本身的引用，而是原对象内第一层对象的引用。
b = a[:]
# b = [x for x in a]; b = list(a); b = copy.copy(a);
print(id(a), id(b))
print([id(x) for x in a])
print([id(x) for x in b])
# 浅拷贝产生的列表b不再是列表a，但两者包含的元素的地址是相同的。
b[0] = 10000
b[3][1] = 'Java'
print(b, a)

import copy

b = copy.deepcopy(a)
# 深拷贝
# 深拷贝只有一种形式，copy模块中的deepcopy()函数。
# 深拷贝拷贝了对象的所有元素，包括多层嵌套的元素。因此，他的时间和空间开销要高。
# 深拷贝拷贝出的对象是一个全新的对象，不再与原来的对象有任何关联。

# 拷贝的注意点？
# 对于非容器类型，如数字、字符，以及其他原子类型，没有拷贝一说，产生的都是原对象的引用。
# 如果元祖变量值包含原子类型对象，即使采用了深拷贝，也只能得到浅拷贝。
